name: 🐳 Docker Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  # 🔍 代码质量检查
  quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: 🔧 Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m --verbose

      - name: 🧪 Run Tests
        run: go test -race -v ./...

  # 🐳 Docker 构建
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 20

    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🔒 容器安全扫描
  security:
    name: 🔒 Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 🚀 部署到测试环境
  deploy-test:
    name: 🚀 Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Deploy to Test Environment
        run: |
          echo "🚀 Deploying to test environment..."
          echo "Image: ${{ needs.build.outputs.image }}"
          echo "Digest: ${{ needs.build.outputs.digest }}"
          # 这里可以添加实际的部署逻辑
          # 比如 kubectl apply 或者 docker-compose up

  # 📊 性能测试
  performance:
    name: 📊 Performance Test
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Performance Test Image
        run: |
          docker build -t performance-test .
          docker run --rm performance-test go test -bench=. -benchmem ./...

  # 📋 通知
  notify:
    name: 📋 Notify Team
    runs-on: ubuntu-latest
    needs: [build, security, performance]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📊 Build Status Summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Status**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Status**: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ needs.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY 